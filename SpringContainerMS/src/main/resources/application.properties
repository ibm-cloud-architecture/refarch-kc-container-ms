# management.endpoints.web.base-path=/
management.endpoints.web.exposure.include=*
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.platform=postgres
spring.datasource.url=${POSTGRESQL_URL:jdbc:postgresql://postgresql1:5432/postgres}
spring.datasource.username=${POSTGRESQL_USER:postgres}
spring.datasource.password=${POSTGRESQL_PWD:supersecret}


# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL9Dialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# kafka - event streams
kafka.containers.consumer.groupid=ContainerSpringConsumers
kafka.orders.consumer.groupid=OrderSpringConsumers
kafka.orders.producer.clientid=OrderSpringProducer
kafka.containers.producer.clientid=ContainerSpringProducer
#Kafka topic name for REJECTED ORDERS topics
kcsolution.rejected.orders=rejected-orders
#Kafka topic name for ALLOCATED ORDERS topics
kcsolution.allocated.orders=allocated-orders
#Kafka topic name for CONTAINERS topics
kcsolution.containers=containers
#Kafka topic name for ORDERS topics
kcsolution.orders=orders
#BPM service login url
kcsolution.bpm_anomaly_service_login=${BPM_ANOMALY_LOGIN:https://postman-echo.com/status/404}
#BPM service url
kcsolution.bpm_anomaly_service=${BPM_ANOMALY:https://postman-echo.com/status/404}
#BPM service user
kcsolution.bpm_anomaly_service_user=${BPM_ANOMALY_USER:user}
#BPM service password
kcsolution.bpm_anomaly_service_password=${BPM_ANOMALY_PASSWORD:password}

# LOGGING LEVEL
logging.level.root=${LOGGING_CONTAINER_MS_ROOT:INFO}
logging.level.org.apache.kafka.clients.consumer.ConsumerConfig=${LOGGING_CONTAINER_MS_CONSUMER_CONFIG:ERROR}
logging.level.org.apache.kafka.clients.producer.ProducerConfig=${LOGGING_CONTAINER_MS_PRODUCER_CONFIG:ERROR}