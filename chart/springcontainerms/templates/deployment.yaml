apiVersion: apps/v1
kind: Deployment
metadata:
  name: "spring-container-ms"
  labels:
    chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
    app.kubernetes.io/part-of: refarch-kc
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: "{{  .Chart.Name }}-selector"
  template:
    metadata:
      labels:
        app: "{{  .Chart.Name }}-selector"
        version: "current"
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      containers:
      - name: "{{  .Chart.Name  }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 20
        resources:
          requests:
            cpu: "{{ .Values.image.resources.requests.cpu }}"
            memory: "{{ .Values.image.resources.requests.memory }}"
        env:
          - name: PORT
            value: "{{ .Values.service.servicePort }}"
          - name: APPLICATION_NAME
            value: "{{ .Chart.Name }}"
          {{- if .Values.eventstreams.truststoreRequired }}
          - name: TRUSTSTORE_ENABLED
            value: "{{ .Values.eventstreams.truststoreRequired }}"
          - name: TRUSTSTORE_PWD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.eventstreams.truststorePasswordSecret }}"
                key: password
          - name: TRUSTSTORE_PATH
            value: "{{ .Values.eventstreams.truststorePath }}/{{ .Values.eventstreams.truststoreFile }}"
          {{- end }}
          #- name: JKS_LOCATION
          #  value: "$JAVA_HOME/jre/lib/security/cacerts"
          - name: KAFKA_BROKERS
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.brokersConfigMap }}"
                key: brokers
          - name: ANOMALY_THRESHOLD
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.bpm.anomalyConfigMap }}"
                key: anomalyThreshold
                optional: true
          - name: BPM_ANOMALY
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.bpm.anomalyConfigMap }}"
                key: url
                optional: true
          - name: BPM_ANOMALY_LOGIN
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.bpm.anomalyConfigMap }}"
                key: login
                optional: true
          - name: BPM_EXPIRATION
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.bpm.anomalyConfigMap }}"
                key: expiration
                optional: true
          - name: BPM_ANOMALY_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.bpm.anomalySecret }}"
                key: user
                optional: true
          - name: BPM_ANOMALY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.bpm.anomalySecret }}"
                key: password
                optional: true
          - name: KCSOLUTION_CONTAINERS_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: containersTopic
          - name: KCSOLUTION_ORDERS_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: ordersTopic
          - name: KCSOLUTION_CONTAINER_ANOMALY_RETRY_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: containerAnomalyRetryTopic
          - name: KCSOLUTION_CONTAINER_ANOMALY_DEAD_TOPIC
            valueFrom:
              configMapKeyRef:
                name: "{{ .Values.kafka.topicsConfigMap }}"
                key: containerAnomalyDeadTopic
          {{- if .Values.eventstreams.enabled }}
          - name: KAFKA_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.eventstreams.esCredSecret }}"
                key: username
          - name: KAFKA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.eventstreams.esCredSecret }}"
                key: password
          {{- end }}
          {{- if .Values.postgresql.capemRequired }}
          - name: POSTGRESQL_CA_PEM
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.capemSecret }}"
                key: binding
          {{- end }}
          - name: POSTGRESQL_URL
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.urlSecret }}"
                key: binding
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.userSecret }}"
                key: binding
          - name: POSTGRESQL_PWD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.postgresql.passwordSecret }}"
                key: binding
      {{- if .Values.eventstreams.truststoreRequired }}
        volumeMounts:
          - mountPath: "{{ .Values.eventstreams.truststorePath }}"
            name: eventstreams-truststore
            readOnly: true
      {{- end }}
      {{- if .Values.eventstreams.truststoreRequired }}
      volumes:
        - name: eventstreams-truststore
          secret:
            secretName: "{{ .Values.eventstreams.truststoreSecret }}"
      {{- end }}
